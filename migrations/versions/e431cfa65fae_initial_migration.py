"""Initial migration

Revision ID: e431cfa65fae
Revises: 
Create Date: 2025-05-08 13:23:43.943086

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = 'e431cfa65fae'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('alerts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('alert_type', sa.String(), nullable=False),
    sa.Column('severity_level', sa.Integer(), nullable=False),
    sa.Column('affected_area', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('pollutant', sa.String(), nullable=True),
    sa.Column('threshold_value', sa.Float(), nullable=True),
    sa.Column('current_value', sa.Float(), nullable=True),
    sa.Column('message_template', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_alerts_affected_area', 'alerts', ['affected_area'], unique=False, postgresql_using='gist')
    op.create_table('aqi_calculation_params',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pollutant', sa.String(), nullable=False),
    sa.Column('index_level', sa.String(), nullable=False),
    sa.Column('min_conc', sa.Float(), nullable=False),
    sa.Column('max_conc', sa.Float(), nullable=False),
    sa.Column('min_aqi', sa.Float(), nullable=False),
    sa.Column('max_aqi', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('demographic_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('region', sa.String(), nullable=False),
    sa.Column('population_density', sa.Float(), nullable=False),
    sa.Column('vulnerability_index', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('monitoring_stations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('station_code', sa.String(), nullable=False),
    sa.Column('station_name', sa.String(), nullable=True),
    sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('station_code')
    )
    op.create_index('idx_monitoring_stations_location', 'monitoring_stations', ['location'], unique=False, postgresql_using='gist')
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('home_location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('work_location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('preferred_channel', sa.String(), nullable=True),
    sa.Column('language', sa.String(), nullable=True),
    sa.Column('sensitivity_level', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_index('idx_users_home_location', 'users', ['home_location'], unique=False, postgresql_using='gist')
    op.create_index('idx_users_work_location', 'users', ['work_location'], unique=False, postgresql_using='gist')
    op.create_table('weather_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('wind_speed', sa.Float(), nullable=True),
    sa.Column('wind_direction', sa.Float(), nullable=True),
    sa.Column('pressure', sa.Float(), nullable=True),
    sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_weather_data_location', 'weather_data', ['location'], unique=False, postgresql_using='gist')
    op.create_table('alert_subscriptions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('alert_type', sa.String(), nullable=False),
    sa.Column('min_severity', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('health_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('has_asthma', sa.Boolean(), nullable=True),
    sa.Column('has_copd', sa.Boolean(), nullable=True),
    sa.Column('has_heart_disease', sa.Boolean(), nullable=True),
    sa.Column('has_diabetes', sa.Boolean(), nullable=True),
    sa.Column('has_pregnancy', sa.Boolean(), nullable=True),
    sa.Column('age_category', sa.String(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notifications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('alert_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('delivery_channel', sa.String(), nullable=True),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.Column('received_at', sa.DateTime(), nullable=True),
    sa.Column('read_at', sa.DateTime(), nullable=True),
    sa.Column('location_type', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['alert_id'], ['alerts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pollutant_readings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('station_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('pm25', sa.Float(), nullable=True),
    sa.Column('pm10', sa.Float(), nullable=True),
    sa.Column('o3', sa.Float(), nullable=True),
    sa.Column('no2', sa.Float(), nullable=True),
    sa.Column('so2', sa.Float(), nullable=True),
    sa.Column('co', sa.Float(), nullable=True),
    sa.Column('aqi', sa.Float(), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('wind_speed', sa.Float(), nullable=True),
    sa.Column('wind_direction', sa.Float(), nullable=True),
    sa.Column('pressure', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['station_id'], ['monitoring_stations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('pollutant_readings')
    op.drop_table('notifications')
    op.drop_table('health_profiles')
    op.drop_table('alert_subscriptions')
    op.drop_index('idx_weather_data_location', table_name='weather_data', postgresql_using='gist')
    op.drop_table('weather_data')
    op.drop_index('idx_users_work_location', table_name='users', postgresql_using='gist')
    op.drop_index('idx_users_home_location', table_name='users', postgresql_using='gist')
    op.drop_table('users')
    op.drop_index('idx_monitoring_stations_location', table_name='monitoring_stations', postgresql_using='gist')
    op.drop_table('monitoring_stations')
    op.drop_table('demographic_data')
    op.drop_table('aqi_calculation_params')
    op.drop_index('idx_alerts_affected_area', table_name='alerts', postgresql_using='gist')
    op.drop_table('alerts')
    # ### end Alembic commands ###
